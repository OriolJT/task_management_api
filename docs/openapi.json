{
  "openapi": "3.1.0",
  "info": {
    "title": "Task Management API",
    "description": "API for managing projects, tasks and users secured by Keycloak JWT tokens.",
    "contact": {
      "name": "Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Projects",
      "description": "Operations on projects owned by the authenticated user"
    },
    {
      "name": "Tasks",
      "description": "Operations on tasks within a project"
    },
    {
      "name": "Users",
      "description": "Registration, self-service account, and admin user ops"
    }
  ],
  "paths": {
    "/api/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a user",
        "description": "Public registration endpoint",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List projects",
        "description": "Returns a page of projects. Provides RFC-5988 Link and X-Total-Count headers.",
        "operationId": "list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "minimum": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size (1-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20,
              "maximum": 100,
              "minimum": 1
            },
            "example": 20
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort directives (multi-valued): field,dir",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "Total items count",
                "style": "simple",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "Link": {
                "description": "Pagination links (first, last, prev, next)",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a project",
        "description": "Creates a new project for the current user",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "URI of the created resource",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/projects/{projectId}/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "List tasks",
        "description": "Returns a page of tasks with pagination headers; sorting is sanitized.",
        "operationId": "list_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size (1-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort directives (multi-valued): field,dir",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "Total items count",
                "style": "simple",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "Link": {
                "description": "Pagination links (first, last, prev, next)",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a task",
        "description": "Creates a new task under the given project",
        "operationId": "create_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/projects/{projectId}/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task",
        "operationId": "get",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a task",
        "operationId": "delete",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task",
        "description": "Partial update; only non-null fields are applied",
        "operationId": "update",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a project",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update project name",
        "description": "Partial update: only name is supported",
        "operationId": "updateName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/admin/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user (admin)",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user (admin)",
        "description": "Partial update; non-null fields applied",
        "operationId": "adminUpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get my account",
        "operationId": "getAccount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update my account",
        "description": "Partial update; non-null fields applied",
        "operationId": "updateMyAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Change my password",
        "operationId": "updateAccountPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/projects/{projectId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove my project",
        "operationId": "removeMyProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectService",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProjectService"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateUserRequest": {
        "type": "object",
        "description": "User registration payload",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address",
            "example": "user@example.com",
            "maxLength": 254,
            "minLength": 0
          },
          "password": {
            "type": "string",
            "description": "Password (letters and digits, min 8)",
            "maxLength": 100,
            "minLength": 8,
            "pattern": "^(?=.*[A-Za-z])(?=.*\\d).{8,100}$"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserResponse": {
        "type": "object",
        "description": "User resource representation",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User id"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "ProjectRequest": {
        "type": "object",
        "description": "Project creation/update payload",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "Website revamp",
            "maxLength": 100,
            "minLength": 3
          }
        },
        "required": [
          "name"
        ]
      },
      "ProjectResponse": {
        "type": "object",
        "description": "Project resource representation",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Project id"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid",
            "description": "Owner user id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "TaskRequest": {
        "type": "object",
        "description": "Task creation/update payload",
        "properties": {
          "title": {
            "type": "string",
            "description": "Short title",
            "example": "Implement OpenAPI polish",
            "maxLength": 200,
            "minLength": 3
          },
          "description": {
            "type": "string",
            "description": "Detailed description",
            "example": "Add error schema, tags and examples",
            "maxLength": 2000,
            "minLength": 0
          },
          "status": {
            "type": "string",
            "description": "Task status; null defaults to TODO",
            "enum": [
              "TODO",
              "IN_PROGRESS",
              "DONE"
            ],
            "example": "IN_PROGRESS"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "description": "Priority 1 (high) - 3 (low)",
            "example": 1,
            "maximum": 3,
            "minimum": 1
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Due date ISO-8601",
            "example": "2025-09-01"
          }
        },
        "required": [
          "title"
        ]
      },
      "TaskResponse": {
        "type": "object",
        "description": "Task resource representation",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Task id",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Implement OpenAPI polish"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "enum": [
              "TODO",
              "IN_PROGRESS",
              "DONE"
            ],
            "example": "TODO"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "description": "Priority 1 (high) - 3 (low)",
            "example": 2
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Due date",
            "example": "2025-09-01"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "description": "Project id",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2025-08-20T10:15:30Z"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "description": "Update fields for a user; all fields optional",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "New email address"
          },
          "role": {
            "type": "string",
            "description": "Optional role (admin use only)",
            "enum": [
              "USER",
              "ADMIN"
            ]
          },
          "password": {
            "type": "string",
            "description": "Optional new password (use dedicated endpoint for self-change)",
            "maxLength": 100,
            "minLength": 8
          }
        }
      },
      "UpdateUserPasswordRequest": {
        "type": "object",
        "description": "Password change payload",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "New password",
            "example": "ChangeMeNow1",
            "maxLength": 100,
            "minLength": 8
          }
        },
        "required": [
          "newPassword"
        ]
      },
      "ProjectService": {

      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "name": "bearerAuth",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}